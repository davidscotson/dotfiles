;; edn is a clojure yaml-type-thing, spec https://github.com/edn-format/edn
{;;;; define things

;; Define different kinds of keyboards
:devices {
    :apple [
            {:vendor_id 1452}
            {:vendor_id 76}
    ]
    :kinesis [{:vendor_id 1523 }]
    :gergoplex [{:vendor_id 4294976620 }]
} ;; devices

;; TODO done: caps lock double shift, gu'[ etc.
;  ; TODO  arrows on alt/opt hjkl, means can use jk for other menus
;; TODO  tab, change tab, change tab backwards (actual tab, plus mirror?)

;; TODO map vim keys to standard controls? ctrl-o, i for back/forward?, change tab, bracket key left-right
;; TODO an app switcher hyper key to jump between: terminal (tabs?), firefox (tabs?), chrome, finder (folders)?
;; TODO leader double?
;; TODO use ctr-h, m more.
;; TODO use alt key more, arrows but others too.
;; TODO do i need arrows in vim, re-use for window controls?
;; TODO basic window management on a twin hyper key via hammerspoon, hjkl?
;; TODO ctrl-w or ctrl-ww for window toggle?
;; TODO hold tab, then left right (up-down) or alpha for jump to app
;; TODO remap ctrl-c to beep in vim, goku beep generally

;; layers are basically "hyper" keys
;; press this in combination with something else and depending on your rule, make things happen
;; this breaks key repeat and may cause false positives if common letters used.
;; the only good keys for this will be missing on the gergoplex, so we need 2 options
:layers {
} ;; layers

;; simlayers are basically "hyper" keys
;; layers works too, but only recommended for non-typing keys like . or tab
;; to use more regular typing keys, use simlayers
;; can also trigger these with two keys
:simlayers {
  :number-mode {:key :spacebar}
} ;; simlayers
    :simlayer-threshold 250

:templates {:doh "say doh! -r411"}
;; main contains multiple manipulators
:main [
    {:des "double key mods shift/command"
     :rules [
          [[:s :d] [:left_control] nil {:alone :tab}]
          [[:k :l] [:right_control]]

          [[:c :v] [:left_shift] nil {:alone :escape}] ;; jk escape
          [[:m :comma] [:right_shift] nil {:alone :escape}] ;; jk escape mirror
          [[:x :c] [:left_alt] nil {:alone :!Sz}]
          [[:comma :period] [:right_alt] nil {:alone :!T6}]
          [[:q :w] :!T6]

          ;; todo py, fg, dh, iu, kx, mb,
        ]}

    ;; each manipulator has a description and multiple rules
    ;;{:des "..."                               ;; -> description
    ;; :rules[
    ;;          [<from>  <to>  <conditions>]    ;; -> rule 1
    ;;          [<from>  <to>  <conditions>]    ;; -> rule 2
    ;; ]}

    ;; rule [:period ["period-mode" 1] nil {:afterup ["period-mode" 0] :alone :period}]
    ;;       |_____| |_______________| |_| |_________________________________________|
    ;;        <from>    <to>      <conditions>         <other options>
    ;;
    ;; karabiner docs: ;; https://pqrs.org/osx/karabiner/json.html#complex_modifications-manipulator-definition
    ;; <other options> includs ~to_if_alone~, ~to_if_held_down~,~to_after_key_up~, ~to_delayed_action~ and ~parameters~.
    ;;

    ;; (custom variables) & modifiers -> Advanced
    ;; https://github.com/yqrashawn/GokuRakuJoudo/blob/master/examples.org#custom-variable

    ;; ----------------------------------
    ;; Hardware keyboard mappings
    ;; ----------------------------------

    {:des "Kinesis Advantage specific mappings"
     :rules [[:condi :kinesis]
              [:return_or_enter ["number-mode" 1] nil {:afterup ["number-mode" 0] :alone :spacebar}]
              [:delete_forward ["number-mode" 1] nil {:afterup ["number-mode" 0] :alone :spacebar}]
              [:spacebar :right_command  nil {:alone :return_or_enter}]
              [:delete_or_backspace :left_command  nil {:alone :delete_or_backspace}]
    ]}

    ;; ----------------------------------
    ;; Key mappings
    ;; ----------------------------------
    {:des "disable number/symbol row for training purposes"
        :rules[
              [:2 :vk_none]
              [:3 :vk_none]
              [:4 :vk_none]
              [:5 :vk_none]
              [:6 :vk_none]
              [:7 :vk_none]
              [:8 :vk_none]
              [:9 :vk_none]
              [:0 :vk_none]
              [:!S1 :vk_none]
              [:!S2 :vk_none]
              [:!S3 :vk_none]
              [:!S4 :vk_none]
              [:!S5 :vk_none]
              [:!S6 :vk_none]
              [:!S7 :vk_none]
              [:!S8 :vk_none]
              [:!S9 :vk_none]
              [:!S0 :vk_none]
              ]}
    {:des "option hjkl = arrows"
        :rules[
              [:left_arrow :vk_none]
              [:right_arrow :vk_none]
              [:up_arrow :vk_none]
              [:down_arrow :vk_none]
              [:!Oc :down_arrow]
              [:!Ov :up_arrow]
              [:!Op :right_arrow]
              [:!Oj :left_arrow]
              ]}
    {:des "disable standard modifiers for training purposes"
        :rules[
              [:left_shift :vk_none]
              [:left_control :vk_none]
              [:right_shift :vk_none]
              [:right_control :vk_none]
              ]}

    {:des "right-command to enter when alone"
          :rules [[:right_command :right_command  nil {:alone :return_or_enter}]]}

    {:des "left-command to backspace when alone"
          :rules [[:left_command :left_command  nil {:alone :delete_or_backspace}]]}

    {:des "numbers and symbols layer"
        :rules [
              ;; symbols on number row moved down one
              [:q :!S1 :number-mode]
              [:w :!S2 :number-mode]
              [:e :!S3 :number-mode]
              [:r :!S4 :number-mode]
              [:t :!S5 :number-mode]
              ;; skip hat, move & over 1 place
              [:y :!S7 :number-mode]

              ;; embedded numpad
              [:n :0 :number-mode]
              [:m :1 :number-mode]
              [:comma :2 :number-mode]
              [:period :3 :number-mode]
              [:j :4 :number-mode]
              [:k :5 :number-mode]
              [:l :6 :number-mode]
              [:u :7 :number-mode]
              [:i :8 :number-mode]
              [:o :9 :number-mode]
              ;; [[:4 :5] :e :number-mode] ;; . period
              ;; [[:5 :6] :n :number-mode] ;; 0550555vvvvvvvv0550 
              ;; brackets symbols
              [:s :!S9 :number-mode] ;; (
              [:d :!S0 :number-mode] ;; )
              [:a :!Shyphen :number-mode] ;; {
              [:f :!Sequal_sign :number-mode] ;; }
              [:x :hyphen :number-mode] ;; [
              [:c :equal_sign :number-mode] ;; ]

              ;; math url/programming symbols
              [:p :open_bracket :number-mode] ;; / divide
              [:slash :!Sclose_bracket :number-mode] ;; + plus
              [:semicolon :quote :number-mode] ;; - minus
              [:h :!S8 :number-mode] ;; * asterisk
              [:g :close_bracket :number-mode] ;; = equals
              [:z :!Sgrave_accent_and_tilde :number-mode] ;; ~ tilde
              [:v :!Squote :number-mode] ;; _ underscore
              [:b :!Sopen_bracket :number-mode] ;; ? question mark
          ]
        }
] ;; main list
 ;; code won't read cheatsheet section
 ;; ! stand for mandatory
 ;; # stand for optional
 ;; C T O S for left command control optional shift
 ;; F for fn
 ;; need to prefix C T O S F with ! or #
 :cheatsheet {:!Ca "command a" ;; mandatory left_command
              :!Ta "control a" ;; mandatory left_control
              :!Oa "option a"
              :!Sa "shift a"
              :#Sa "shift a" ;; keycode a, optional left_shift
              :!CTOa "command control option a"
              :!Cspacebar "command space"
              :!Fa "fn a"
              :##a "keycode a optional any"
              :!!a "mandatory hyper(control command option shift) a "}
}
