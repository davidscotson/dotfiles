;; edn is a clojure yaml-type-thing, spec https://github.com/edn-format/edn
{;;;; define things

;; Define different kinds of keyboards
:devices {
    :apple [
            {:vendor_id 1452}
            {:vendor_id 76}
    ]
    :kinesis [{:vendor_id 10730 }]
    :gergoplex [{:vendor_id 4294976620 }]
} ;; devices

;; TODO done: caps lock double shift
; TODO  arrows on modifier hjkl is awkward on dvorak, use t/k as modifier? Do i need these or just next/previous, complete?
;; TODO  arrows, change tab, bracket key left-right
;; TODO  [ ] on <>, {} on brackets or vice versa?

;; TODO map vim keys to standard controls? ctrl-o, i for back/forward?, change tab, bracket key left-right
;; TODO an app switcher hyper key to jump between: terminal (tabs?), firefox (tabs?), chrome, finder (folders)?
;; TODO better brackets based on dvorak <> location and (maybe) simultaneous presses
;; TODO use ctr-h, m more.
;; TODO use held tab for something, m more.
;; TODO use alt key more
;; TODO basic window management on a twin hyper key via hammerspoon, hjkl?
;; TODO two hyper keys for numbers and symbols on top row

;; layers are basically "hyper" keys
;; press this in combination with something else and depending on your rule, make things happen
;; this breaks key repeat and may cause false positives if common letters used.
;; the only good keys for this will be missing on the gergoplex, so we need 2 options
:layers {
    :launch-mode {:key :tab}
} ;; layers

;; simlayers are basically "hyper" keys
;; layers works too, but only recommended for non-typing keys like . or tab
;; to use more regular typing keys, use simlayers
;; can also trigger these with two keys
:simlayers {
  :number-mode {:key :spacebar}
  :ctrl-mode-left {:key :a}
  :ctrl-mode-right {:key :semicolon}
} ;; simlayers

;; main contains multiple manipulators
:main [

    {:des "esc" :rules [[[:w :e] :escape]]}
    {:des "tab" :rules [[[:s :d] :tab]]}
    {:des "backspace left" :rules [[[:d :f] :delete_or_backspace]]}
    {:des "enter" :rules [[[:k :l] :return_or_enter]]}
    ;; each manipulator has a description and multiple rules
    ;;{:des "..."                               ;; -> description
    ;; :rules[
    ;;          [<from>  <to>  <conditions>]    ;; -> rule 1
    ;;          [<from>  <to>  <conditions>]    ;; -> rule 2
    ;; ]}

    ;; rule [:period ["period-mode" 1] nil {:afterup ["period-mode" 0] :alone :period}]
    ;;       |_____| |_______________| |_| |_________________________________________|
    ;;        <from>    <to>      <conditions>         <other options>
    ;;
    ;; karabiner docs: ;; https://pqrs.org/osx/karabiner/json.html#complex_modifications-manipulator-definition
    ;; <other options> includs ~to_if_alone~, ~to_if_held_down~,~to_after_key_up~, ~to_delayed_action~ and ~parameters~.
    ;;

    ;; (custom variables) & modifiers -> Advanced
    ;; https://github.com/yqrashawn/GokuRakuJoudo/blob/master/examples.org#custom-variable

    ;; ----------------------------------
    ;; Hardware keyboard mappings
    ;; ----------------------------------

    {:des "Kinesis Advantage specific mappings"
     :rules [:kinesis
    ]}

    ;; ----------------------------------
    ;; Key mappings
    ;; ----------------------------------
    ; {:des "disable number/symbol row for training purposes"
    ;     :rules[
    ;           [:1 :vk_none]
    ;           [:2 :vk_none]
    ;           [:3 :vk_none]
    ;           [:4 :vk_none]
    ;           [:5 :vk_none]
    ;           [:6 :vk_none]
    ;           [:7 :vk_none]
    ;           [:8 :vk_none]
    ;           [:9 :vk_none]
    ;           [:0 :vk_none]
    ;           [:!S1 :vk_none]
    ;           [:!S2 :vk_none]
    ;           [:!S3 :vk_none]
    ;           [:!S4 :vk_none]
    ;           [:!S5 :vk_none]
    ;           [:!S6 :vk_none]
    ;           [:!S7 :vk_none]
    ;           [:!S8 :vk_none]
    ;           [:!S9 :vk_none]
    ;           [:!S0 :vk_none]
    ;           ]}
    ; {:des "disable standard modifiers for training purposes"
    ;     :rules[
    ;           [:left_shift :vk_none]
    ;           [:left_control :vk_none]
    ;           [:right_shift :vk_none]
    ;           [:right_control :vk_none]
    ;           ]}
    {:des "caps lock to control when combo, esc when alone"
        :rules [[:caps_lock :left_control nil {:alone :escape}]]}

    {:des "right-command to enter when alone"
          :rules [[:right_command :right_command  nil {:alone :return_or_enter}]]}

    {:des "left-command to backspace when alone"
          :rules [[:left_command :left_command  nil {:alone :delete_or_backspace}]]}

    {:des "numbers and symbols on the top row"
        :rules [
              ;; symbols on number row moved down one
              [:q :!S1 :number-mode]
              [:w :!S2 :number-mode]
              [:e :!S3 :number-mode]
              [:r :!S4 :number-mode]
              [:t :!S5 :number-mode]
              ;; skip hat, move & over 1 place
              [:y :!S7 :number-mode]

              ;; number row moved down one
              [:u :7 :number-mode]
              [:i :8 :number-mode]
              [:o :9 :number-mode]
              [:p :0 :number-mode]
              ;; 7,8,9 already in numpad location, add others too
              ;; just use pinky 0
              [:m :1 :number-mode]
              [:comma :2 :number-mode]
              [:period :3 :number-mode]
              [:j :4 :number-mode]
              [:k :5 :number-mode]
              [:l :6 :number-mode]

              ;; brackets symbols
              [:a :!S9 :number-mode] ;; (
              [:s :!S0 :number-mode] ;; )
              [:d :!Shyphen :number-mode] ;; {
              [:f :!Sequal_sign :number-mode] ;; }
              [:x :hyphen :number-mode] ;; [
              [:c :equal_sign :number-mode] ;; ]

              ;; math symbols
              [:h :!Sclose_bracket :number-mode] ;; + plus
              [:semicolon :quote :number-mode] ;; - minus
              [:slash :open_bracket :number-mode] ;; / divide
              [:n :!S8 :number-mode] ;; * asterisk
              [:g :close_bracket :number-mode] ;; = equals

              ;; url/programming symbols
              [:z :!Sgrave_accent_and_tilde :number-mode] ;; ~ tilde
              [:v :!Squote :number-mode] ;; _ underscore
              [:b :!Sopen_bracket :number-mode] ;; ? question mark

          ]
        }

    {:des "hold z or / for left-right shift in combo"
        :rules [
          ;; easier reach to modifier keys
          [:z     :left_shift   nil {:alone :z}]
          [:slash :right_shift  nil {:alone :slash}]
      ]
    }
    {:des "hold a or s for left-right control in combo"
        :rules [
          ;; easier reach to modifier keys
          ;; need to split the keyboard in half to avoid rolls
            [:q :!Tq :ctrl-mode-right]
            [:w :!Tw :ctrl-mode-right]
            [:e :!Te :ctrl-mode-right]
            [:r :!Tr :ctrl-mode-right]
            [:t :!Tt :ctrl-mode-right]
            [:a :!Ta :ctrl-mode-right]
            [:s :!Ts :ctrl-mode-right]
            [:d :!Td :ctrl-mode-right]
            [:f :!Tf :ctrl-mode-right]
            [:g :!Tg :ctrl-mode-right]
            [:z :!Tz :ctrl-mode-right]
            [:x :!Tx :ctrl-mode-right]
            [:v :!Tv :ctrl-mode-right]
            [:b :!Tb :ctrl-mode-right]

            [:y :!Tf :ctrl-mode-left]
            [:u :!Tu :ctrl-mode-left]
            [:i :!Ti :ctrl-mode-left]
            [:o :!To :ctrl-mode-left]
            [:p :!Tp :ctrl-mode-left]
            [:h :!Th :ctrl-mode-left]
            [:j :!Tj :ctrl-mode-left]
            [:k :!Tk :ctrl-mode-left]
            [:l :!Tl :ctrl-mode-left]
            [:semicolon :!Tsemicolon :ctrl-mode-left]
            [:n :!Tn :ctrl-mode-left]
            [:m :!Tm :ctrl-mode-left]
            [:comma :!Tcomma :ctrl-mode-left]
            [:period :!Tperiod :ctrl-mode-left]
            [:slash :!Tslash :ctrl-mode-left]
      ]
    }
] ;; main list
 ;; code won't read cheatsheet section
 ;; ! stand for mandatory
 ;; # stand for optional
 ;; C T O S for left command control optional shift
 ;; F for fn
 ;; need to prefix C T O S F with ! or #
 :cheatsheet {:!Ca "command a" ;; mandatory left_command
              :!Ta "control a" ;; mandatory left_control
              :!Oa "option a"
              :!Sa "shift a"
              :#Sa "shift a" ;; keycode a, optional left_shift
              :!CTOa "command control option a"
              :!Cspacebar "command space"
              :!Fa "fn a"
              :##a "keycode a optional any"
              :!!a "mandatory hyper(control command option shift) a "}
}
